#############################################
APRS2RRD Instrukcja instalacji i użytkowania
#############################################
WAŻNA DLA WERSJI 1.0-23122018


Autor: Mateusz Lubecki SP8EBC
kontakt: sp8ebc@gmail.com
tel: +48 660 43 44 46


SPIS TREŚCI
1. Wstęp
2. Oferowana funkcjonalność
3. Wymagania sprzętowe i programowe
4. Instalacja
4a. Przygotowanie bazy danych
4b. Przygotowanie plików RRD
4c. Używanie telemetrii jako temperatury
5. Uruchomienie



1. Oprogramowanie APRS2RRD służy do pobierania i przetwarzania danych pogodowych generowanych przez stacje pracujące w ramach sieci APRS. Aplikacja pozyskuje odczyty przez połączenie ustanawiane do wybranego przez użytkownika serwera APRS-IS (APRS Internet System). Po przetworzeniu, dane są zapisywane do plików RRD (Round Robin Database), oraz opcjonalnie do bazy danych MySQL. Ostatecznie są one prezentowane uzytkownikowi na wygenerowanej stronie WWW zawierającej dane numeryczne, oraz wykresy utworzone przy pomocy RRDtool. 

Pierwsza, bardzo wczesna i niedbale napisana wersja aplikacji powstała na przełomie 2013 i 2014 roku a jej celem było zastąpienie niedokładnych wykresów kreślonych na portalu aprs.fi. Dodatkowo autor chciał w pełni uniezależnić się od zewnętrznej infrastruktury, która może zniknąć z dnia na dzień pozostawiajać stację pogodową niezbyt użyteczną w celach lotniczych.

Aktualna wersja stabilna, 1.0 została w zasadzie przepisana od zera. Poprawiono przede wszystkim niedbale i niefachowo napisany kod sieciowy oraz rutyny odpowiedzialne za parsowanie ramek APRS przychodzących z serwera. Dzięki temu udało się wyeliminować główną i najważniejszą wadę dotychczasowych wersji aplikacji, tj przeróżne "wysypywanie się" jej z powodu wyjątków Access Violation, czyli "wyskakiwania" poza zakres tablic i wskaźników. Aktualnie kod oferuję prawie taką samą funkcjonalność jak uprzednio, jest jednak oparty o uznane standardy jak biblioteka STL (Standard Template Library), oraz Boost co bardzo ułatwia uzyskanie wydajnej a przede wszystkim stabilnej pracy.  

2. Cała funkcjonalność programu APRS2RRD może zostać opisana przez listę kroków jaką przebywają dane otrzymywane od serwera APRS do momentu w którym stają się dostępne dla użytkownika, już w przetworzonej formie odpowiedniej do wyświetlenia na stronie WWW.

2a. Komunikacja z serwerami APRS-IS w oparciu o bibliotekę Boost ASIO (Asynchronous Input/Output) i standardowy protokół tekstowy
2b. Parsowanie otrzymanych w protokole tekstowym APRS-IS ramek, celem wydobycia ich znaku źródłowego, docelowego, ścieki pakietowej i samych przesyłanych w nich danych
2c. Jeżeli otrzymana ramka jest ramką z danymi pogodowymi, parsowanie temperatury, ciśnienia, wilgotności oraz parametrów wiatru (kierunek, średnia, porywy).
2c. Jeżeli otrzymana ramka zawiera dane telemetryczne a użytkownik zdecydował się na włączenie opcji powodującej użycie kanału piątego telemetrii jako odczytu temperatury, użycie tej temperatury w dalszym procesie.
2d. Ograniczenie "slew rate" czyli szybkości narastania bądź opadania wartości sygnałów. Pozwala na wygładzenie "szpilek", które mogą pojawiać się na skutek niepoprawnej pracy przyrządów pomiarowych na stacji i powodować zmiany wartości odczytów szybsze, niż jest to fizycznie możliwe.
2e. Korekcja kierunku wiatru pozwalająca dodać bądź odjąć zadany kąt od wartości otrzymanej z ramek pogodowych. Korekcja odbywa się wektorowo, tj. z odpowiednią obsługą przejścia przez 0/360
2f. Zapis przetworzonych parametrów do plików kołowej bazy danych RRD przy pomocy rrdtool.
2g. Kreślenie przy pomocy aplikacji rrdtool wykresów na podstawie danych zapisanych w plikach RRD.
2h. Generowanie statycznej strony WWW zawierającej numeryczne dane z ostatnio odebranej ramki, oraz wykresy pokazujące zmianę parametrów na przestrzeni czasu. Strona ta może być w pewnym ograniczonym stopniu dostosowywana przy pomocy pliku konfiguracyjnego.
2i. Opcjonalny zapis danych do bazy danych MySQL.


3. Aplikacja została napisana w języku C++ z myślą o uruchomieniu w środowisku systemu Linux (w szczególności Debian lub Ubuntu). Ze względu na marginalne generowane obciążenie nie posiada własnych, szczegułowych wymagań sprzętowych. Maszyna na której jest uruchomiona powinna posiadać wystarczającą moc obliczeniową do poprawnej i sprawnej pracy wybranego systemu operacyjnego. 

Autor oprogramowania nie testował możliwości kompilacji w systemach operacyjnych innych niż Linux i nie gwarantuję, że podjęte próby zakończą się powodzeniem. Aplikacja do poprawnej pracy wymaga zainstalowania następujących pakietów

~> screen - Umożliwia uruchomienie aplikacji w tle
~> rrdtool
~> libconfig++ oraz libconfig++-dev (wersja 1.5.0) - Biblioteka obsługująca odczyt plików konfiguracyjnych
~> libmysql++ oraz libmysql++-dev (wersja 3.2.1) - Interfejs MySQL dla języka C++
-> libboost w wersji 1.58 wzwyż (niektóre wcześniejsze też mogą działać), paczki binarne i dev. W szczególności moduły
--> asio (jest w paczce 'libboost' jako że jest to w zasadzie najważniejsza cześć boost)
--> date-time (libboost-date-time)
--> regex (libboost-regex)
--> system (libboost-system)
--> thread (libboost-thread)
--> test (libboost-test)
~> mysql-client (wersja 5.5.43) - Klient MySQL umożliwiający ustanawiania połączeń do bazy danych
~> mysql-server (werska 5.5.43)
~> g++ - Kompilator języka C++
~> make - System zarządzania procesem kompilacji umożliwiający kompilację jednym poleceniem
~> Apache - Serwer WWW
-> git

Moduły bazy danych można pominąć jeżeli użytkownik zdecyduje się na nie używanie bazy MySQL do zapisu danych. Podane w nawiasach wersje oprogramowania odpowiadają tym, które były używane do tworzenia i testowania aktualnej wersji oprogramowania. Aplikacja powinna bez problemu działać na starszej wersji podanych pakietów, o ile będą one w pełni zgodne z wymienionymi. Oprócz w/w pakietów oprogramowania należy zainstalować wszelkie wymagane zależności, zgodnie z zaleceniami używanego menadżera pakietów (aptitude, apt-get)



4. Instalację nalezy rozpocząć od instalacji wszystkich wymaganych pakietów i ich zależności. Proces różni się od wybranego menadżera pakietów ale w systemie Debian i Ubuntu sprowadza się do wydania następującego polecenia w terminalu z uprawnieniami roota:

aptitude install screen libconfig++9 libconfig++-dev libmysql++3 libmysql++-dev mysql-client mysql-server g++ make apache2-bin apache2-data

Dygresja: Należy pamiętać, że wszystkie systemy Linuksowe a w szerszym ujęciu Uniksowe (FreeBSD, MacOS itp) są 'case sensitive', co oznacza, że rozróżniają wielkość liter w nazwach plików i poleceniach systemowych.

Aptitude automatycznie uzupełni listę o brakujące zależności, ściagnie odpowiednie paczki deb z internetu a na końcu je zainstaluje. Należy pamiętać, że podczas normalnego użytkownika systemu operacyjnego pracuje się na koncie z ograniczonym dostępem (w systemach Ubuntu bezpośrednie logowanie na roota jest wyłączone). Uzyskanie praw administratora w konsoli odbywa się przez wpisanie 'su' w Debianie, albo 'sudo su' w Ubuntu

Po instalacji należy sklonować repozytorium z kodem źródłowym aplikacji. Robi się to wydając polecenie 'git clone https://github.com/SP8EBC/aprs2rrd-se'. Następnie należy przejść do powstałego w ten sposób katalogu aprs2rr-se i wydać tam kolejne polecenie 'git checkout 1.0'. Komunikat, który pokaże się w konsoli przy tej okazji można zignorować. W tym momencie kod źródłowy jest "cofnięty" do wersji release 1.0 opisywanej w tej instrukcji, co jest istotne gdyż na tym repozytorium cały czas prowadzony jest dalszy rozwój aplikacji i wersję "daily-builds" mogą się nawet w ogóle nie kompilować. 

W dalszej kolejności nalezy przejść do katalogu Release i wydać w nim polecenie 'make'. Nastąpi kompilacja oparta o dostarczony razem ze źródłami plik makefile, na skutek której zostanie utworzony plik 'APRS2RRD' (wielkimi literami) będący aplikacją w stanie zdolnym do uruchomienia. Przed uruchomieniem należy jednak przygotować odpowiednią konfigurację przez edycję dostarczonego szablonu 'config.conf.example'. Zawiera on wyczerpujące komentarze dotyczące działania każdej z opcji, dlatego dokładny opis nie będzie tutaj powielany. Po zakończeniu konfiguracji plik należy zapisać razem z plikiem 'aprs2rrd' w jego katalogu 'bin', nadając mu przy tym nazwę 'config.conf'. Do edycji można wykorzystać prosty w obsłudzie edytor 'nano', którego klawiszologia została opisana tutaj: http://blog.keepmind.eu/nano-bez-tajemnic-cz-1-kodowanie-i-skroty.html (najważniejsza jest kombinacja CTRL+o do zapisu i CTRL+x do zamknięcia pliku). Na koniec można spróbować uruchomić tymczasowo program i sprawdzić czy nie wyśweitla on błedów związanych z parsowaniem pliku konfiguracyjnego. Po weryfikacji należy zakończyć program przez kombinację ^C (CTRL + C), ponieważ przed utworzeniem plików RRD i tak nie będzie działać poprawnie.
 
 


4a. Jeżeli użytkownik zdecydował się na użycie MySQL do zapisu otrzymywanych danych, należy odpowiednio przygotować serwer i bazę danych. Jeżeli w docelowej konfiguracji zapis ma się odbywać na inną maszynę niż ta na której uruchomiony będzie APRS2RRD, należy upewnić się czy serwer MySQL zezwala na połączenia przychodzące (czy nie pracuje tylko lokalnie, co jest domyślnym zachowaniem). W tym celu należy otworzyć na serwerze bazodanowym plik konfiguracyjny /etc/mysql/my.cnf (dotyczy systemów Debian i Ubuntu) i sprawdzić wartość parametru 'bind-address' w sekcji mysqld. Jeżeli wspomniany parametr jest poprzedzony znakiem komentarza oznacza to, że serwer będzie oczekiwał nadchodzących połączeń na wszystkich interfejsach sieciowych obecnych w maszynie. Wartość 127.0.0.1 oznacza pracę tylko i wyłącznie lokalną, natomiast każdy ionny adres IP zgodny z konfiguracją sieci, oznacza przypisanie do jednego obecnego interfejsu. Dodatkowo należy sprawdzić czy ewentualne ustawienia firewalla nie będą uniemożliwiały zdalnych połączeń. W tym celu należy wydać komendę 'iptables -vL --line-numbers', która pokażę wszystkie reguły obecne w tablicy 'filter'. Przykładowy wynik działania jest przedstawiony poniżej i logicznie skutkuje blokowaniem wszystkich przychodzących połączeń na porcie usługi mysql (reguła 4) za wyjątkiem jawnie zdefiniowanych dwóch hostów zewnętrznych (2 oraz 3), jak również pętli lokalnej (1)

Chain INPUT (policy ACCEPT 11771 packets, 1349K bytes)
num pkts bytes target  prot opt in  out  source               destination         
1     28  4957 ACCEPT  tcp  --  any any  localhost            anywhere  tcp dpt:mysql
2      0     0 ACCEPT  tcp  --  any any  v082029.home.net.pl  anywhere  tcp dpt:mysql
3      0     0 ACCEPT  tcp  --  any any  go4adventure.pl      anywhere  tcp dpt:mysql
4      1    40 DROP    tcp  --  any any  anywhere             anywhere  tcp dpt:mysql

Chain FORWARD (policy ACCEPT 0 packets, 0 bytes)
num   pkts bytes target prot opt in out  source               destination         

Chain OUTPUT (policy ACCEPT 12384 packets, 4231K bytes)
num   pkts bytes target prot opt in out  source               destination    

W dalszym ciagu konfiguracji należy utworzyć bazę danych, przypisać do niej użytkowników a następnie zaimportować dostarczony szablon konfiguracji. W tym celu najwygodniej posłużyć się narzędziem phpMyAdmin (instalowany z osobnej paczki), który w domyślnej konfiguracji jest dostępny pod adresem http://adreserwera/phpmyadmin. Po zalogowaniu na konto roota (koniecznie) należy z górnej belki wybrać zakładkę "Bazy danych" a następnie w sekcji "Utwórz bazę danych", wpisać interesującą nas nazwę (zgodną z konfigruacją) i wybrać kodowanie jako "utf8_polish_ci". W dalszej kolejności należy przejść do zakładki "Użytkownicy" i poniżej widniejącej tam listy kliknąć "Dodaj Użytkownika". Nazwa i hasło są dowolne. Jeżeli serwer bazy danych jest uruchomiony na tej samej maszynie co APRS2RRD, pole Host powinno zostać ustawione jako "Host Lokalny". Jeżeli jest inaczej, to ze względów bezpieczeństwa zaleca się aby użyć wartości "Użyj pola tekstowego: " i wpisać tam konkretną nazwę hosta aby ograniczyć możliwości włamania się. Należy tutaj pamiętać, że MySQL w momencie odebrania połączenia przychodzącego zawsze stara się wykonać RevDNS i zamienić adres IP na odpowiadającą mu nazwę domenową. 

Użytkownik utworzony do komunikacji z bazą powinien mieć maksymalnie ograniczone prawa dostępu. W tym celu należy kliknąć 'edytuj uprawnienia' przy jego pozycji, następnie odznaczyć wszystkie globalne uprawnienia a w sekcji "Uprawnienia specyficzne dla baz danych" wybrać odpowiednią nazwę i przyznać prawa tylko do polecenie INSERT i SELECT

Na koniec należy wgrać dostarczony szablon schema.sql, przy czym przed importem należy go otworzyć i w linijce zawierającej: CREATE TABLE IF NOT EXISTS `dzialy` zamienić wartośc 'dzialy' na taką odpowiadającą konfigiracji



4b. Przed ropoczęciem normalnego korzystania z programu użytkownik musi przygotować pliki RRD służące do przechowywania odczytów stacji pogodowej. W przyjętej architekturze każdy plik RRD posiada jedno źródło danych (jeden DS), jedno archiwum kołowe (RRA) i wynikowo służy do przechowywania jednego parametru. Tworzy się je przez wydanie nastepujących komend w katalogu przechowywania:

rrdtool create szkwaly.rrd --start N --step 260 DS:szkwaly:GAUGE:300:U:U RRA:AVERAGE:0.5:1:650
rrdtool create predkosc.rrd --start N --step 260 DS:predkosc:GAUGE:300:U:U RRA:AVERAGE:0.5:1:650
rrdtool create kierunek.rrd --start N --step 260 DS:kierunek:GAUGE:300:U:U RRA:AVERAGE:0.5:1:650

Znaczenie poszczególnych, "nie trywialnych" parametrów wywołania jest następujące:
--start N ; definiuje początkowy timestamp w bazie danych. Ponieważ aplikacja nie będzie zapisywała niczego z wsteczną datą można wpisać tutaj N czyli aktualny czas

--step 260 ; odstęp czasu pomiędzy kolejnymi próbkami. Definiuje odstep w sekundach pomiędzy kolejnymi komórkami w pliku RRD. Wartość ta powinna być równa interwałowi w jakim wybrana stacja pogodowa nadaję swoje pakiety

GAUGE ; Jeden z typów źródła danych. Typ GAUGE oznacza wartość bezwzględną zapisywaną w takiej samej postaci w jakiej została przekazana do rrdtool. Innym jest np. COUNTER, czyli licznik zwiększający wartość w bazie danych o tyle o ile zwiększyła się przekazywana wartość (jest używany np. do monitorowania oraz archiwizacji ilości pobranych przez użytkownika danych, nawet jeżeli np. licznik w urządzeniu dostępowym zeruje się na skutek odłączenia go od zasilania)

300 (występujące po GAUGE) ; Maksymalny dopuszczalny czas pomiędzy kolejnymi zapisami wartości. Jeżeli dane nie spłyną w zapisanym tutaj okresie, wtedy RRDtool zapiszę do bazy danych symbol "NaN" (Not a Number) zamiast konkretnej liczby. W efekcie przełoży się to na dziurę na wykresie

U:U ; Minimalna i maksymalna dopuszczalna wartość ustawiona jako nieznana (Unknown) co oznacza, że baza przyjmie dowolną.

AVERAGE ; Typ RRA, czyli archiwum przechowywania Round Robin. AVERAGE oznacza, że baza przechowuje wartość średnią z danych wejściowych. 

0.5 

4c. Program ma możliwość wykorzystania danych telemetrycznych jak źródło odczytów temperatury. Po włączeniu tej opcji APRS2RRD będzie całkowicie ignorował dane o temperaturze przychodzące z regularnych ramek pogodowych APRS. Zamiast tego informacje te będą uzupełniane o wartość 5go kanał telemetrii. Opcja ta może być przydatna w przypadku np urządzenia Wx3in1 i kilku innych trackerów, które nadają właśnie Nalezy pamiętać, że jeżeli dane telemetryczne są nadawane rzadziej niż dane pogodowe, to tuż po włączeniu programu kilka pierwszych zapisów będzie zawierało wartość 0 jako temperaturę. APRS2RRD wymaaga również ręcznego podania współczynników służących do oliczenia wartości fizycznej parametru, nie jest w stanie odczytywać tych danych z odpowiednich ramek konfiguracji telemetrii nadawanych przez stację. 

5. Po zakończeniu przygotowania pliku konfiguracyjnego i stworzeniu plików RRD oraz skonfigurowaniu bazy danych można prystąpić do uruchomienia aplikacji. W aktualnej wersji pracuje ona w trybie interaktywnym i wyświetla całe swoje wyjście na konsoli tekstowej z której jest uruchomiona. Aby działała ona w tle należy posłużyć się aplikacją screen. W katalogu "doc" znajduje się przykładowy plik rc.aprs2rrd, który może służyć do automatycznego zamykania a następnie uruchamiania programu w tle. Należy jedynie zmienić widoczną w nim ścieżkę do pliku binarnego na prawdziwą
